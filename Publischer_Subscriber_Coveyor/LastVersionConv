#include <ros.h>
#include <std_msgs/UInt16.h>
#include <std_msgs/String.h>
ros::NodeHandle nh;

std_msgs::UInt16 speedvalue;

int V = 0;
char number[5] = "dog";
String Number;
//int pulses, A_SIG=0, B_SIG=1;
int pulses;
byte A_SIG=0;
byte B_SIG=1;
//################# LCD Stuff
String state = "STOP"; 
String speedText = "100";
double speedms = 0.0;
#include "SSD1306Ascii.h"
#include "SSD1306AsciiAvrI2c.h"

#define I2C_ADDRESS 0x3C

#define RST_PIN -1

SSD1306AsciiAvrI2c oled;
//#############

//Led Red
#define ledR 10
#define butR 11
//Led Green
#define ledG 8
#define butG 9
#define potiA 7
#define potiB 6


void msggetinfo(const std_msgs::String& msg){
  String info;
  
  info = msg.data;
  //info.toCharArray(pato, 20);
  
  if (info == "start" || info == "send" ){
    
  digitalWrite(ledG, HIGH);
  digitalWrite(ledR, LOW);
  speedvalue.data = V;
  //info = msg.data;
  //delay(1000);
  } 
  else if (info == "stop" ) {
    digitalWrite(ledR, HIGH);
    digitalWrite(ledG, LOW);
    speedvalue.data = 0;
   }
  
  else {
    digitalWrite(ledG, LOW);
    digitalWrite(ledR, LOW);
    }
 
}

void check_buttons(){
//int buttonStateG = 0;
//int buttonStateR = 0;  
byte i = 0;  

//buttonStateG = digitalRead(butG);
//buttonStateR = digitalRead(butR);

if (digitalRead(butG)==HIGH){
  speedvalue.data = V;
  digitalWrite(ledR, LOW);
  for (i = 0; i <= 5; i++) {
      digitalWrite(ledG, HIGH);
      delay(70);
      digitalWrite(ledG, LOW);
      delay(70);
  }
  digitalWrite(ledG, HIGH);
  state = "RUN ";
  //conveyorInfo();
}
else if (digitalRead(butR)==HIGH ) {
    speedvalue.data = 0;
    digitalWrite(ledG, LOW);
    for (i = 0; i <= 5; i++) {
      digitalWrite(ledR, HIGH);
      delay(70);
      digitalWrite(ledR, LOW);
      delay(70);
    }
    digitalWrite(ledR, HIGH);
    oled.clear();
    state = "STOP";
    //conveyorInfo();
   }
else {
    //digitalWrite(ledG, LOW);
    //digitalWrite(ledR, LOW);
    }

}

void A_RISE(){
 detachInterrupt(0);
 A_SIG=1;
 
 if(B_SIG==0)
 pulses++;//moving forward
 if(B_SIG==1)
 pulses--;//moving reverse
 //Serial.println(pulses);
 V = pulses;
 attachInterrupt(0, A_FALL, FALLING);
}

void A_FALL(){
  detachInterrupt(0);
 A_SIG=0;
 
 if(B_SIG==1)
 pulses++;//moving forward
 if(B_SIG==0)
 pulses--;//moving reverse
 //Serial.println(pulses);
 V = pulses;
 attachInterrupt(0, A_RISE, RISING);  
}

void B_RISE(){
 detachInterrupt(1);
 B_SIG=1;
 
 if(A_SIG==1)
 pulses++;//moving forward
 if(A_SIG==0)
 pulses--;//moving reverse
 //Serial.println(pulses);
 V = pulses;
 attachInterrupt(1, B_FALL, FALLING);
}

void B_FALL(){
 detachInterrupt(1);
 B_SIG=0;
 
 if(A_SIG==0)
 pulses++;//moving forward
 if(A_SIG==1)
 pulses--;//moving reverse
 //Serial.println(pulses);
 V = pulses;
 attachInterrupt(1, B_RISE, RISING);
}

////



//ros::Subscriber<std_msgs::Empty> sub("toggle_led", &messageCb );
ros::Subscriber<std_msgs::String> sub_A("getinfo",msggetinfo);
//ros::Publisher chatter("chatter", &str_msg);
ros::Publisher speed_goal("speed_goal", &speedvalue);
void setup()
{
  pinMode(potiA, INPUT_PULLUP);
  pinMode(potiB, INPUT_PULLUP);
  pinMode(ledG, OUTPUT);
  pinMode(butG, INPUT);
  pinMode(ledR, OUTPUT);
  pinMode(butR, INPUT);
  pinMode(LED_BUILTIN, OUTPUT);
  
  //pinMode(13, OUTPUT);
  nh.initNode();
  //nh.subscribe(sub);
  nh.subscribe(sub_A);
  //nh.advertise(chatter);
  nh.advertise(speed_goal);
  nh.loginfo("info");
  speedvalue.data = 0;
  //
  attachInterrupt(0, A_RISE, RISING);
  attachInterrupt(1, B_RISE, RISING);

  //#####lcd_Stuff
  #if RST_PIN >= 0
  oled.begin(&Adafruit128x64, I2C_ADDRESS, RST_PIN);
  #else // RST_PIN >= 0
  oled.begin(&Adafruit128x64, I2C_ADDRESS);
  #endif // RST_PIN >= 0
  // Call oled.setI2cClock(frequency) to change from the default frequency.

  //oled.setFont(Adafruit5x7);
  oled.setFont(lcd5x7);
  
  oled.clear();
  oled.setCursor(0,0);
  delay(200);
  oled.clear();
  delay(100);
  oled.clear();

  //####
  conveyorInfo();
}


void conveyorInfo(){
  float v = V;
  oled.setCursor(0,0);
  //String state = "STOP"; 
  //String speedText = "100";
  unsigned short speed = 0;
  speedms = v/10;
  speedText = V;
  //oled.setFont(Adafruit5x7);
  
  uint32_t m = micros();
  //oled.clear();
  oled.set2X();
  oled.println("Conveyor L");
  oled.set1X();
  oled.println(" goal");
  oled.println("Speed:   " + state);
  //oled.println();
  oled.println();
  //oled.print(state);
  //oled.println();
  oled.set2X();
  
  oled.print(speedText + "% "); 
  
  oled.print(speedms,1);
  oled.set1X();
  oled.print(" m/s");
  //delay(200);
}

void loop()
{
  //String Number;
  if (V>100){
    V = 100;
    pulses = 100;
    }
   else if (V<0){
    V = 0;
    pulses = 0; 
   }


  Number = V;
  Number.toCharArray(number, 5);
  nh.loginfo(number);
  speed_goal.publish(&speedvalue);
  check_buttons();
  //counter();
  nh.spinOnce();
  
  conveyorInfo();
  
  delay(100);
  
}

