#include <ros.h>
#include <std_msgs/UInt16.h>
#include <std_msgs/String.h>
ros::NodeHandle nh;

std_msgs::UInt16 speedvalue;





#define EN        8  

//Direction pin
#define X_DIR     5 
#define Y_DIR     6
#define Z_DIR     7

//Step pin
#define X_STP     2
#define Y_STP     3 
#define Z_STP     4 


//DRV8825
//int delayTime=240; //Delay between each pause (uS)
int delayTime=140;
//int stps=6400;// Steps to move
int stps=800;

double ratioX = 38.4;
long totalstepsX = stps*ratioX;
double anglex = 0.0;

double ratioY = 38.4;
long totalstepsY = stps*ratioY;

ros::Subscriber<std_msgs::String> sub_A("getinfo",msggetinfo);

void msggetinfo(const std_msgs::String& msg){
  String info;
  
  info = msg.data;
  //info.toCharArray(pato, 20);
  
}




void step(boolean dir, byte dirPin, byte stepperPin, int steps){

  digitalWrite(dirPin, dir);

  delay(100);

  for (int i = 0; i < steps; i++) {

    digitalWrite(stepperPin, HIGH);

    delayMicroseconds(delayTime); 

    digitalWrite(stepperPin, LOW);

    delayMicroseconds(delayTime); 

  }

}

void setup(){

  pinMode(X_DIR, OUTPUT); pinMode(X_STP, OUTPUT);

  pinMode(Y_DIR, OUTPUT); pinMode(Y_STP, OUTPUT);

  pinMode(Z_DIR, OUTPUT); pinMode(Z_STP, OUTPUT);

  pinMode(EN, OUTPUT);

  digitalWrite(EN, LOW);
  
  nh.initNode();
  nh.subscribe(sub_A);

}

void loop(){
  anglex = 3.1416*0.5;
  //totalstepsX = stps*ratioX*(anglex/);
  totalstepsX = round(stps*ratioX*anglex/(2*3.1416)) ;
  
  step(false, X_DIR, X_STP, totalstepsX); //X, Clockwise
  //step(false, X_DIR, X_STP, stps); //X, Clockwise
  //--step(true, Y_DIR, Y_STP, totalstepsY); //Y, Clockwise
  //step(false, Y_DIR, Y_STP, stps); //Y, Clockwise
  //step(false, Z_DIR, Z_STP, stps); //Z, Clockwise

  delay(100);

  step(true, X_DIR, X_STP, totalstepsX); //X, Counterclockwise
  //--step(false, Y_DIR, Y_STP, totalstepsY); //Y, Clockwise
  //step(true, Y_DIR, Y_STP, stps); //Y, Counterclockwise
  //step(true, Z_DIR, Z_STP, stps); //X, Counterclockwise

  delay(100);

}
